<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leason&#39;s Blog</title>
  
  <subtitle>All is flux,nothing stays still</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.leason.top/"/>
  <updated>2018-07-26T05:31:16.273Z</updated>
  <id>http://www.leason.top/</id>
  
  <author>
    <name>Leason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot(二)：构建RESTful Web服务</title>
    <link href="http://www.leason.top/2018/07/25/SpringBoot-%E4%BA%8C-%EF%BC%9A%E6%9E%84%E5%BB%BARESTful%20Web%E6%9C%8D%E5%8A%A1/"/>
    <id>http://www.leason.top/2018/07/25/SpringBoot-二-：构建RESTful Web服务/</id>
    <published>2018-07-25T07:03:44.000Z</published>
    <updated>2018-07-26T05:31:16.273Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-目的"><a href="#一-目的" class="headerlink" title="一.目的"></a>一.目的</h3><p>这篇博客主要是简单讲一下如何使用SpringBoot来实现RESTful web service。什么是RESTful？就是一种设计风格，由一组架构约束条件和原则组成，从客户端到服务器的每个请求都必须包含理解请求所必需的信息。</p><p>看文字有点晦涩，但对程序员来说，看到代码一下就能明白了（毕竟上面比较专业的描述，都是百度来的）。</p><a id="more"></a><h3 id="二-创建项目"><a href="#二-创建项目" class="headerlink" title="二.创建项目"></a>二.创建项目</h3><p>上一章<a href="http://www.leason.top/2018/07/17/SpringBoot-一-：创建第一个工程/">SpringBoot(一)：创建第一个工程</a>已经讲了如何快速的创建一个工程，基础配置同上。</p><p>项目配置好后，创建一个bean类，名字随意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greeting</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Greeting</span><span class="params">(<span class="keyword">long</span> id, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建Controller类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String template = <span class="string">"hello,%s!"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicLong counter = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/greeting"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Greeting <span class="title">greeting</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Greeting(counter.incrementAndGet(),</span><br><span class="line">                String.format(template, name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>@RestController</code> 是<code>@ResponseBody</code>和<code>@Controller</code>的组合注解,可以直接返回json。</p></li><li><p><code>@RequestMapping</code> 是一个用来处理请求地址映射的注解，可用于类或方法上。表示该类或者方法中的的响应请求都是以该地址作为父路径。在上面没有指定GET、PUT、POST等等，是因为<code>@RequestMapping</code>默认情况下是映射所有HTTP操作的，当然也可以使用<code>@RequestMapping(method=GET)</code>来指定是哪种请求。</p></li><li><p><code>@RequestParam</code> 将查询字符串参数的值绑定到greeting()方法的name参数中,如果请求中不存在name参数，就默认使用“World”。</p></li></ul><h3 id="三-测试服务"><a href="#三-测试服务" class="headerlink" title="三.测试服务"></a>三.测试服务</h3><p>启动服务，访问http：// localhost：8080 / greeting，其中显示：</p><div class="note class_name"><p>{“id”:1,”content”:”hello, World!”} </p></div>使用http：// localhost：8080 / greeting？name = Leason,提供查询字符串参数：<div class="note class_name"><p>{“id”:2,”content”:”hello,Leason!”} </p></div><h3 id="四-请求第三方接口"><a href="#四-请求第三方接口" class="headerlink" title="四.请求第三方接口"></a>四.请求第三方接口</h3><p>使用SpringBoot提供<a href="https://gturnquist-quoters.cfapps.io/api/random" target="_blank" rel="noopener">https://gturnquist-quoters.cfapps.io/api/random</a> 的接口。</p><p>创建一个实体类：Quote</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Quote</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Quote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Quote&#123;"</span> +</span><br><span class="line">                <span class="string">"type='"</span> + type + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", value="</span> + value +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在我们之前创建的Controller类中，新建地址映射:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/quote"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    Quote quote = restTemplate.getForObject(<span class="string">"http://gturnquist-quoters.cfapps.io/api/random"</span>, Quote.class);</span><br><span class="line">    <span class="keyword">return</span> quote.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后访问<a href="http://localhost:8080/quote" target="_blank" rel="noopener">http://localhost:8080/quote</a> ，即可看到我们请求的结果</p><div class="note class_name"><p>Quote{type=’success’, value={id=6, quote=It embraces convention over configuration, providing an experience on par with frameworks that excel at early stage development, such as Ruby on Rails.}} </p></div><p>这是主动调用得到的，如果需要程序自动请求并展示呢？可以使用Spring Boot来管理应用程序生命周期，找到根目录的Application文件，在其中配置<code>RestTemplate</code>，同时将它放到<code>CommandLineRunner</code>的回调中，以便在启动时由SpringBoot执行，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//用于打印结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Application.class);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">(RestTemplateBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CommandLineRunner <span class="title">run</span><span class="params">(RestTemplate restTemplate)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> args -&gt; &#123;</span><br><span class="line">Quote quote = restTemplate.getForObject(</span><br><span class="line"><span class="string">"http://gturnquist-quoters.cfapps.io/api/random"</span>, Quote.class);</span><br><span class="line">log.info(quote.toString());</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们在运行程序的时候，就可以看到请求的结果(为了方便，就直接输出到console界面了)：</p><p>2018-07-26 12:15:25.756  INFO 7260 — [           main] javafx.application.Application           : Quote{type=’success’, value={id=6, quote=It embraces convention over configuration, providing an experience on par with frameworks that excel at early stage development, such as Ruby on Rails.}}</p><h3 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h3><p>SpringBoot的所有功能模块用起来都很方便配置，且并不仅仅局限于客户端的开发，也可以用于编写接口供其它程序使用。举个例子：有个需求是在一个页面做个定时任务，请其它3个系统的最新消息。则可以把请求这一步放到SpringBoot服务里来做，提供redis缓存，在需求页面上则每次只需调一个接口就行。</p><p><a href="https://github.com/boomclub/SpringBoot-Introduction" target="_blank" rel="noopener"><strong>点击查看源码</strong></a></p><p><strong><code>参考资料</code></strong>：</p><ul><li><a href="https://spring.io/guides/gs/consuming-rest/" target="_blank" rel="noopener">https://spring.io/guides/gs/consuming-rest/</a></li><li><a href="https://spring.io/guides/gs/rest-service/" target="_blank" rel="noopener">https://spring.io/guides/gs/rest-service/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-目的&quot;&gt;&lt;a href=&quot;#一-目的&quot; class=&quot;headerlink&quot; title=&quot;一.目的&quot;&gt;&lt;/a&gt;一.目的&lt;/h3&gt;&lt;p&gt;这篇博客主要是简单讲一下如何使用SpringBoot来实现RESTful web service。什么是RESTful？就是一种设计风格，由一组架构约束条件和原则组成，从客户端到服务器的每个请求都必须包含理解请求所必需的信息。&lt;/p&gt;
&lt;p&gt;看文字有点晦涩，但对程序员来说，看到代码一下就能明白了（毕竟上面比较专业的描述，都是百度来的）。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.leason.top/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="http://www.leason.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://www.leason.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot(一)：创建第一个工程</title>
    <link href="http://www.leason.top/2018/07/17/SpringBoot-%E4%B8%80-%EF%BC%9A%E5%88%9B%E5%BB%BA%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B7%A5%E7%A8%8B/"/>
    <id>http://www.leason.top/2018/07/17/SpringBoot-一-：创建第一个工程/</id>
    <published>2018-07-17T01:39:02.000Z</published>
    <updated>2018-07-20T09:43:35.023Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h3><p>为什么要用Spring Boot？因为简洁，简单。</p><p>Spring系列发展到现在 ，如果一个新接触的开发者想要使用 spring 技术，需要一个一个的搞配置，然后还有个版本兼容性问题，非常麻烦，就算是老手偶尔都会踩坑。而 Spring Boot 就是来解决这个问题的，完全可以先不关心如何配置，做到快速启动开发进行业务逻辑编写，各种需要的技术，加入 starter 配置就行，开发速度大大提高.</p><p>诚然，如果是个技术爱好者要追根究底，也可以从Spring最开始入门，让头发变得更少一点，而不是“开袋即食”。</p><a id="more"></a><h3 id="二-创建工程"><a href="#二-创建工程" class="headerlink" title="二.创建工程"></a>二.创建工程</h3><ul><li>打开IDEA</li><li>New Project 选择 Spring Initializr</li><li>填写Group、Artifact</li><li>点击Web,开启Web功能</li><li>Finish</li></ul><p>(开发工具默认使用IDEA,JDK1.8+,Mavan3.0+)</p><p>pom.xml : 依赖文件，项目基本框架以及后续框架注入都在这里配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;project xmlns=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span><br><span class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">&lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;salesforcedemo&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;salesforcedemo&lt;/name&gt;</span><br><span class="line">&lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.3.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;properties&gt;</span><br><span class="line">&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">&lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">&lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 依赖框架添加 --&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><p>工程目录下的resources文件夹为Web端文件:</p><ul><li><p>static: 静态资源</p></li><li><p>templates: 网页资源</p></li><li><p>application.properties：配置文件</p></li></ul><p>看看项目根目录的Application文件：</p><p><code>@SpringBootApplication</code>是一个便利的注释，它添加了以下所有内容：</p><ul><li><p><code>@Configuration</code> 将类标记为应用程序上下文的bean定义的源</p></li><li><p><code>@EnableAutoConfiguration</code> 告诉Spring Boot开始根据类路径设置，添加其他bean和各种属性设置</p></li><li><p>在使用Spring MVC应用程序时，通常你会添加<code>@EnableWebMvc</code>，但Spring Boot会在类路径上看到spring-webmvc时自动添加，这会将应用程序标记为Web应用程序，并激活关键行为，比如设置 <code>DispatcherServlet</code></p></li><li><p><code>@ComponentScan</code> 告诉Spring在包中寻找其他组件，配置和服务，允许它找到控制器</p></li><li><p>main()方法使用Spring Boot的SpringApplication.run()方法来启动应用程序。你是否注意到没有一行XML？也没有web.xml文件。此Web应用程序是100％纯Java，无需进行任何初级配置</p></li></ul><h3 id="三-Hello-SpringBoot"><a href="#三-Hello-SpringBoot" class="headerlink" title="三.Hello SpringBoot"></a>三.Hello SpringBoot</h3><p>新建Controller类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello SpringBoot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，打开浏览器访问localhost:8080，即可显示：</p><blockquote><p>Hello SpringBoot! </p></blockquote><h3 id="四-单元测试"><a href="#四-单元测试" class="headerlink" title="四.单元测试"></a>四.单元测试</h3><p>可以使用Spring Boot编写一个非常简单的全栈集成测试，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControllerIT</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> URL base;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate template;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.base = <span class="keyword">new</span> URL(<span class="string">"http://localhost:"</span> + port + <span class="string">"/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ResponseEntity&lt;String&gt; response = template.getForEntity(base.toString(),</span><br><span class="line">                String.class);</span><br><span class="line">        assertThat(response.getBody(), equalTo(<span class="string">"Greetings from Spring Boot!"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">assertThat</span><span class="params">(String body, Matcher&lt;String&gt; stringMatcher)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.......</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<code>webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT</code>嵌入服务先在随机端口上启动，然后运行时调用<code>@LocalServerPort</code>发现实际端口。</p><h3 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h3><p>可以看到，不需要进行多余的其它配置，web.xml不需要，tomact内嵌有，整个项目从开始构建到运行不会超过5分钟。</p><p><a href="https://github.com/boomclub/SpringBoot-Introduction" target="_blank" rel="noopener"><strong>点击查看源码</strong></a></p><p><strong><code>参考资料</code></strong>：</p><ul><li><a href="https://spring.io/guides/gs/spring-boot/" target="_blank" rel="noopener">https://spring.io/guides/gs/spring-boot/</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一-简介&quot;&gt;&lt;a href=&quot;#一-简介&quot; class=&quot;headerlink&quot; title=&quot;一.简介&quot;&gt;&lt;/a&gt;一.简介&lt;/h3&gt;&lt;p&gt;为什么要用Spring Boot？因为简洁，简单。&lt;/p&gt;
&lt;p&gt;Spring系列发展到现在 ，如果一个新接触的开发者想要使用 spring 技术，需要一个一个的搞配置，然后还有个版本兼容性问题，非常麻烦，就算是老手偶尔都会踩坑。而 Spring Boot 就是来解决这个问题的，完全可以先不关心如何配置，做到快速启动开发进行业务逻辑编写，各种需要的技术，加入 starter 配置就行，开发速度大大提高.&lt;/p&gt;
&lt;p&gt;诚然，如果是个技术爱好者要追根究底，也可以从Spring最开始入门，让头发变得更少一点，而不是“开袋即食”。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.leason.top/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="http://www.leason.top/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://www.leason.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>四月</title>
    <link href="http://www.leason.top/2018/04/19/%E5%9B%9B%E6%9C%88/"/>
    <id>http://www.leason.top/2018/04/19/四月/</id>
    <published>2018-04-19T03:36:21.000Z</published>
    <updated>2018-04-19T04:34:55.801Z</updated>
    
    <content type="html"><![CDATA[<p>大约是每年这个时候，都有一部分人离职<br>来来去去<br>良禽择木，不管是自我救赎还是环境压迫<br>离开都不会是终点，而是新的起点。</p><p>代码写多了后，看待事物的逻辑都会觉得甚是简单。<br>或如final永恒不变，或如var反复无常。</p><a id="more"></a><p>如果一开始就能看清所有事多好，厌恶的绝不触碰，喜欢的就深深刻在血液里，这样的生活就能轻松多了。</p><p>最近沉迷绝地求生，在没有接触这个游戏前，任何源于它的消息我都嗤之以鼻，不就是个你跑我追的捉迷藏游戏，有啥可玩的啊。</p><p>然而谁能想到我是如此的立场不坚，现在每天下班都必须得玩个几小时。</p><p>是什么让我如此着迷？<br>是可以无所顾忌的冲刺拼杀<br>是可以随意决定的游戏方式<br>是可以重头来过的生命历程</p><p>人都是生而自由，然活不自由的。<br>小时候可以无忧无虑，随着年龄的增长都会有不同的桎梏，有时候不得不选择放弃某些事或人。</p><p>我对代码的热情会冰消云散吗？<br>目前是不会的，且希望永远不会。<br>当对一件事物投入足够多的关注和感情后，不论是主动或者被动的抽离，都如同丢了一缕灵魂。</p><p>我希望我的灵魂是丰富完美的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大约是每年这个时候，都有一部分人离职&lt;br&gt;来来去去&lt;br&gt;良禽择木，不管是自我救赎还是环境压迫&lt;br&gt;离开都不会是终点，而是新的起点。&lt;/p&gt;
&lt;p&gt;代码写多了后，看待事物的逻辑都会觉得甚是简单。&lt;br&gt;或如final永恒不变，或如var反复无常。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.leason.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="心情" scheme="http://www.leason.top/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="生活" scheme="http://www.leason.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>ASP调用WebService服务接口</title>
    <link href="http://www.leason.top/2018/03/12/ASP%E8%B0%83%E7%94%A8WebService%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/"/>
    <id>http://www.leason.top/2018/03/12/ASP调用WebService服务接口/</id>
    <published>2018-03-12T08:26:29.000Z</published>
    <updated>2018-03-13T01:58:50.287Z</updated>
    
    <content type="html"><![CDATA[<p>什么是WebService?</p><p>Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。</p><p>今天遇到一个项目，要在一个较老的系统（ASP写的）上面做功能集成，所以需要使用ASP来调用WebService的接口，网上关于这方面的资料很少，只有自己动手了。</p><p>相较于其它语言，通过ASP来访问接口的过程可能会稍微复杂一点，主要就是SOAP和XML的编写。推荐一个比较偷懒的方法，可以通过ReadyAPI（以前是SoapUI）直接获取，这款软件专门用于WebService接口的相关测试。</p><a id="more"></a><p>接口调用都大同小异，就使用项目中的接口举例。首先在ReadyAPI上新建项目，在Request的Form中输入需要的参数点击运行即可，然后切换到XML界面，就可以得到需要的信息。<br><img src="http://p1ns9jwhz.bkt.clouddn.com/webService.png" alt=""></p><p>接下来编写ASP请求即可：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">Dim Url, strXml, XMLHTTP, xmlResponse </span><br><span class="line">Url= <span class="string">"接口地址"</span> </span><br><span class="line">strXml = <span class="string">"&lt;?xml version="</span><span class="string">"1.0"</span><span class="string">"?&gt;"</span></span><br><span class="line"><span class="comment">//编写SOAP信息，基本结构一定要有，否则无法被Java识别</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;soapenv:Envelope xmlns:soapenv="</span><span class="string">"http://schemas.xmlsoap.org/soap/envelope/"</span><span class="string">" xmlns:web="</span><span class="string">"http://webService.core.jawave.com/"</span><span class="string">"&gt;"</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;soapenv:Header/&gt;"</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;soapenv:Body&gt;"</span></span><br><span class="line"><span class="comment">//接口中指定调用的方法</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;web:createUser&gt;"</span></span><br><span class="line"><span class="comment">//接口需要的参数，这里是Json字符串</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;web:userJsonString&gt;&#123;"</span><span class="string">" userId "</span><span class="string">": "</span><span class="string">"zhangsan"</span><span class="string">","</span><span class="string">"userName"</span><span class="string">":"</span><span class="string">"张三"</span><span class="string">","</span><span class="string">"emailAddress"</span><span class="string">":"</span><span class="string">"aa@163.com"</span><span class="string">","</span><span class="string">" perCode "</span><span class="string">":"</span><span class="string">"jawave"</span><span class="string">"&#125; &lt;/web:userJsonString&gt;"</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;/web:createUser&gt;"</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;/soapenv:Body&gt;"</span></span><br><span class="line">strXml = strXml&amp;<span class="string">"&lt;/soapenv:Envelope&gt;"</span></span><br><span class="line"><span class="comment">//输出参数，便于参看</span></span><br><span class="line">response.write strXml&amp;<span class="string">"&lt;/br&gt;&lt;/br&gt;"</span> </span><br><span class="line"><span class="comment">//创建MS的XMLHTTP组件 </span></span><br><span class="line">Set XMLHTTP = server.CreateObject(<span class="string">"MSXML2.ServerXMLHTTP"</span>) </span><br><span class="line">XMLHTTP.Open <span class="string">"post"</span>,Url,<span class="keyword">false</span> </span><br><span class="line">XMLHTTP.setrequestheader <span class="string">"content-length "</span>,len(strXml) </span><br><span class="line">XMLHTTP.setrequestheader <span class="string">"content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span> </span><br><span class="line"><span class="comment">//发送信息到url </span></span><br><span class="line">XMLHTTP.send strXml </span><br><span class="line">If XMLHTTP.readystate &lt;&gt; <span class="number">4</span> then </span><br><span class="line">  xmlResponse = <span class="string">"xml error"</span> </span><br><span class="line">Else </span><br><span class="line"><span class="comment">//服务器返回的信息 </span></span><br><span class="line">  xmlResponse = XMLHTTP.responseText </span><br><span class="line">End If </span><br><span class="line">Set XMLHTTP = Nothing </span><br><span class="line"><span class="keyword">if</span> err.number &lt;&gt; <span class="number">0</span> then </span><br><span class="line">  xmlResponse = <span class="string">"error "</span> </span><br><span class="line">  err.clear </span><br><span class="line">end If</span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">Response.Write xmlResponse </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;什么是WebService?&lt;/p&gt;
&lt;p&gt;Web service是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序，可使用开放的XML（标准通用标记语言下的一个子集）标准来描述、发布、发现、协调和配置这些应用程序，用于开发分布式的互操作的应用程序。&lt;/p&gt;
&lt;p&gt;今天遇到一个项目，要在一个较老的系统（ASP写的）上面做功能集成，所以需要使用ASP来调用WebService的接口，网上关于这方面的资料很少，只有自己动手了。&lt;/p&gt;
&lt;p&gt;相较于其它语言，通过ASP来访问接口的过程可能会稍微复杂一点，主要就是SOAP和XML的编写。推荐一个比较偷懒的方法，可以通过ReadyAPI（以前是SoapUI）直接获取，这款软件专门用于WebService接口的相关测试。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://www.leason.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="ASP" scheme="http://www.leason.top/tags/ASP/"/>
    
      <category term="WebService" scheme="http://www.leason.top/tags/WebService/"/>
    
  </entry>
  
  <entry>
    <title>Sophix Demo-Android热更新</title>
    <link href="http://www.leason.top/2018/03/07/Sophix-Demo/"/>
    <id>http://www.leason.top/2018/03/07/Sophix-Demo/</id>
    <published>2018-03-07T04:08:00.000Z</published>
    <updated>2018-03-07T05:16:50.992Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间，苹果禁止了iOS的热修复功能，几个做iOS开发的朋友都苦不堪言，一旦遇到重要更新就需要全量发布，无法进行灰度，这就导致如果更新出现问题，就会变得十分麻烦，影响范围会很广。</p><p>庆幸的是Android尚未受到任何影响，目前的Android热更新基本上是采用底层替换或者是类加载，Sophix则把这两者进行了结合， Sophix 3.0也已上线，接入和使用非常简单。</p><a id="more"></a><h3 id="一-控制台申请"><a href="#一-控制台申请" class="headerlink" title="一.控制台申请"></a>一.控制台申请</h3><p>登录阿里云控制台开通移动热修复服务，然后创建App。</p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E4%BA%A7%E5%93%81.png" alt=""></p><p>在控制台找到你刚刚创建的App，点击管理即可查看详细信息</p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/App%E8%AF%A6%E6%83%85.png" alt=""></p><p>这里的AppId，AppSecret，RSA密钥是后面我们程序中需要用到的。</p><h3 id="二-集成"><a href="#二-集成" class="headerlink" title="二.集成"></a>二.集成</h3><h4 id="1-Android-stuido"><a href="#1-Android-stuido" class="headerlink" title="1.Android stuido"></a>1.Android stuido</h4><p>Android stuido采用gradle远程仓库依赖, 打开项目找到app的build.gradle文件，添加如下配置：</p><p>添加maven仓库地址：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        url <span class="string">"http://maven.aliyun.com/nexus/content/repositories/releases"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>添加gradle坐标版本依赖：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">        compile <span class="string">'com.aliyun.ams:alicloud-android-hotfix:3.2.0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-eclipse"><a href="#2-eclipse" class="headerlink" title="2.eclipse"></a>2.eclipse</h4><ul><li>下载OneSDk.zip，解压出hotfix_core-release.aar文件后再解压这个aar文件</li><li>复制解压文件jni目录下的libsophix.so到自己的jni目录下, eclipse jni目录一般指的就是项目libs目录</li><li>复制utdid4all-1.1.5.3_proguard.jar和alicloud-android-utils-1.0.3.jar文件到项目libs目录下</li><li>重命名classes.jar为sophix.jar并复制到项目libs目录下</li><li>合并AndroidManifest.xml文件中的内容到本项目AndroidManifest.xml文件<br>（编译期间报utdid类重复异常, 那么步骤2中添加的utdid4all-1.1.5.3_proguard.jar从项目libs目录移除即可）</li></ul><h4 id="3-添加权限"><a href="#3-添加权限" class="headerlink" title="3.添加权限"></a>3.添加权限</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;! -- 网络权限 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span><br><span class="line">&lt;! -- 外部存储读权限，调试工具加载本地补丁需要 --&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span><br></pre></td></tr></table></figure><p>READ_EXTERNAL_STORAGE权限属于Dangerous Permissions，仅调试工具获取外部补丁需要，不影响线上发布的补丁加载，调试时请自行做好android6.0以上的运行时权限获取。</p><h4 id="4-SDK接口接入"><a href="#4-SDK接口接入" class="headerlink" title="4.SDK接口接入"></a>4.SDK接口接入</h4><p>必须在<code>Application.attachBaseContext()</code>或者<code>Application.onCreate()</code>的最开始进行SDK初始化操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initialize最好放在attachBaseContext最前面，初始化直接在Application类里面，切勿封装到其他类</span></span><br><span class="line">        SophixManager.getInstance().setContext(<span class="keyword">this</span>)</span><br><span class="line">                .setAppVersion(appVersion)</span><br><span class="line">                .setAesKey(<span class="keyword">null</span>)</span><br><span class="line">                .setEnableDebug(<span class="keyword">true</span>)</span><br><span class="line">                .setSecretMetaData(<span class="string">"idSecret"</span>,<span class="string">"appSecret"</span>,<span class="string">"rsaSecret"</span>)</span><br><span class="line">                .setPatchLoadStatusStub(<span class="keyword">new</span> PatchLoadStatusListener() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoad</span><span class="params">(<span class="keyword">int</span> mode, <span class="keyword">int</span> code, String info, <span class="keyword">int</span> handlePatchVersion)</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// 补丁加载回调通知</span></span><br><span class="line">                        <span class="keyword">if</span> (code == PatchStatus.CODE_DOWNLOAD_SUCCESS) &#123;</span><br><span class="line">                            <span class="comment">// 表明补丁加载成功</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (code == PatchStatus.CODE_LOAD_RELAUNCH) &#123;</span><br><span class="line">                            <span class="comment">// 表明新补丁生效需要重启. 开发者可提示用户或者强制重启</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 其它错误信息, 查看PatchStatus类说明</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).initialize();</span><br><span class="line">        <span class="comment">// queryAndLoadNewPatch不可放在attachBaseContext 中，否则无网络权限。</span></span><br><span class="line">        SophixManager.getInstance().queryAndLoadNewPatch();</span><br></pre></td></tr></table></figure></p><ul><li>setSecretMetaData(idSecret, appSecret, rsaSecret): 三个参数是在阿里云控制台，移动热修复中申请得到的。</li></ul><h3 id="三-Demo测试"><a href="#三-Demo测试" class="headerlink" title="三.Demo测试"></a>三.Demo测试</h3><h4 id="1-生成差量补丁"><a href="#1-生成差量补丁" class="headerlink" title="1.生成差量补丁"></a>1.生成差量补丁</h4><p>创建应用，添加TextView控件，进行第一次签名打包作为旧版：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.txt);</span><br><span class="line">        textView.setText(<span class="string">"旧版显示内容"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后对代码进行调整，进行第二次打包作为新版：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        TextView textView = (TextView) findViewById(R.id.txt);</span><br><span class="line">        textView.setText(<span class="string">"我是新版显示内容"</span>);</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,<span class="string">"补丁更新成功"</span>,Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下载阿里的<a href="https://help.aliyun.com/document_detail/53247.html?spm=5176.doc53240.6.548.Wv0ck6" target="_blank" rel="noopener">SophixPatch Tool</a>打补丁工具，在设置中进行补丁的输出路径和其它参数配置，然后生成补丁即可。</p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/%E8%A1%A5%E4%B8%81.png" alt=""></p><h4 id="2-上传补丁"><a href="#2-上传补丁" class="headerlink" title="2.上传补丁"></a>2.上传补丁</h4><p>找到你添加的应用，点击管理，然后添加版本（<code>这里的版本号对应的是当前投入使用的应用版本号，必须一致</code>）。</p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9C%AC.png" alt=""></p><p>然后在详情界面上传补丁，这里只是测试就不进行灰度，直接全量发布。</p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/%E6%97%A7%E7%89%88.png" style="zoom:50%"></p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/%E6%96%B0%E7%89%88.png" style="zoom:50%"></p><p>搞定！</p><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四.总结"></a>四.总结</h3><p>Sophix相比其它的热更新框架来说，集成很简单，完全是傻瓜式接入，不需要配置各种繁琐的参数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间，苹果禁止了iOS的热修复功能，几个做iOS开发的朋友都苦不堪言，一旦遇到重要更新就需要全量发布，无法进行灰度，这就导致如果更新出现问题，就会变得十分麻烦，影响范围会很广。&lt;/p&gt;
&lt;p&gt;庆幸的是Android尚未受到任何影响，目前的Android热更新基本上是采用底层替换或者是类加载，Sophix则把这两者进行了结合， Sophix 3.0也已上线，接入和使用非常简单。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://www.leason.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://www.leason.top/tags/Android/"/>
    
      <category term="热更新" scheme="http://www.leason.top/tags/%E7%83%AD%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>飞蛾的哲学</title>
    <link href="http://www.leason.top/2018/02/27/%E9%A3%9E%E8%9B%BE%E7%9A%84%E5%93%B2%E5%AD%A6/"/>
    <id>http://www.leason.top/2018/02/27/飞蛾的哲学/</id>
    <published>2018-02-27T06:37:05.000Z</published>
    <updated>2018-02-27T09:24:16.017Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个旧小区，住的都是上了年纪的老人。如果是白天的话，可以看到经过风雨侵蚀，外墙的墙衣已经掉了一大半露出惨白墙体。现在凌晨5点，窗外雨很大。为了不让雨飘进打开的窗户，都会在窗上装个雨棚，上面的铁皮已经锈迹斑驳，微微拱起。这种时候，这样的未雨绸缪反而成了败笔，打在雨棚上的声音如同在敲击一个破鼓，哐哐作响，让人心生烦躁。</p><p>门外的吵架声依旧，还夹杂着母亲的哭声。他记不清这是多少次了，从他能记事开始，伴随他长大的就是父母无休止的争吵，没有童年，没有零食。父亲喜欢打牌，但逢赌必输，输了就回家撒气，跟母亲吵骂打架。</p><p>他们仗着雨声，吵得更大声了，反正噪音也穿不过这雨夜。</p><a id="more"></a><hr><p>跟其他高中生不一样，他安静内敛不说话。本该如花一样的年纪，却鲜艳不起来。他不想让父母争吵，他知道只有好好学习，用读书成绩让父母开心，所以他认真上课，努力学习。但这样的东西又有什么用呢？手里第一名的成绩单被揉得稀烂，像他的心一样。</p><p>他穿上衣服，从窗户翻出去，走向了江边。</p><p>在江边向远处看去，只能看见漆黑的天空和大地。江面还有路灯微弱的投影，在灯光下依稀能看见房子的倒影。由于下雨，江面泛起薄薄的雾气，像电影的地狱场景里刻画的大锅，而他就是待煮的灵魂。那片拥有倒影的水面则是偏安一隅的天堂，他不属于那里。</p><p>他想逃离这样复杂的生活，他知道没有什么比死更需要勇气，但他也知道只有这样才能来得痛快洒脱，不管另外一个灵魂的世界能怎样，至少不会比现在差吧。</p><p>江里没有浅水区，从岸边跳下去水就没到了胸口，慢慢向江中心走去。水好凉啊，寒冷透过了他的身体和心脏，本该滚烫的血液此刻放佛也在慢慢变凉。他张开肺，扯开嘴，最后呼吸了一大口这世界的空气，里面伴着水草和生物腐烂后的味道。</p><hr><p>在微弱路灯的照射下，他看到江面有一个生物在扑腾挣扎，难道还有其它东西跟他一样？他停了下来，仔细看去原来是一只飞蛾，翅膀是麻灰色，与江水相比是那样渺小。</p><p>飞蛾的翅膀被打湿，表面的“麟粉”已经洗落得差不多，只剩下浮出水面的头可能还算是干燥的。雨势不算太大，雨滴打在它身上犹如重击，但仍旧努力的向岸边扑腾。每每要靠近岸边一些，便又被水浪推开，上岸与它而言就是徒劳。那还挣扎什么呢？他心里这样想着。</p><p>这场雨已经下了几天，所以水位上涨，刚好够岸边的草垂到水里。如果能够抓住草茎，那它就能活。但目前来讲，飞蛾是肯定抓不到的。</p><p>江面漂浮着一个牛奶盒子，飞蛾爬上去了。雨终于小了一些，它像在阳光下一样全力挥动双翅，翅膀上的水滴被四散抛开。他知道它在等，等翅膀变得能飞的时候。</p><p>他看入了神。</p><p>忘记过了多久，飞蛾开始尝试着向岸边飞去，当然又掉进了水里。飞蛾的翅膀已经湿透，但离那根草茎已经很近。最后时刻，终于用它那跟庞大的身躯比起来显得十分细小的腿抓住了岸边的草茎，拖着沉重的翅膀，慢慢爬了上去。</p><p>他为飞蛾感到开心和庆幸，能活下去了，真好。</p><p>突然之间，他像被唤醒了沉睡的灵魂，飞蛾尚能溺水而活，他为什么要放弃呢？他应该去触摸多彩的生活啊，去创造属于自己的未来，去改变这一切啊。</p><p>他爬上了岸，坐在岸边，看着草上的飞蛾傻笑。</p><hr><p>雨停了，太阳升起，阳光揉在风里吹开了江面的阴霾。</p><p>他看到了，他真切的看透了这条孕育过无数生命的河流，那些渴望活着的生灵顺着千年的血脉流进他的灵魂里。</p><p>他明明知道沧海一粟，天地蜉蝣并不能生而立足；</p><p>他明明知道会有力不可逆的风雨困境；</p><p>但心里还是忍不住，想去活啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个旧小区，住的都是上了年纪的老人。如果是白天的话，可以看到经过风雨侵蚀，外墙的墙衣已经掉了一大半露出惨白墙体。现在凌晨5点，窗外雨很大。为了不让雨飘进打开的窗户，都会在窗上装个雨棚，上面的铁皮已经锈迹斑驳，微微拱起。这种时候，这样的未雨绸缪反而成了败笔，打在雨棚上的声音如同在敲击一个破鼓，哐哐作响，让人心生烦躁。&lt;/p&gt;
&lt;p&gt;门外的吵架声依旧，还夹杂着母亲的哭声。他记不清这是多少次了，从他能记事开始，伴随他长大的就是父母无休止的争吵，没有童年，没有零食。父亲喜欢打牌，但逢赌必输，输了就回家撒气，跟母亲吵骂打架。&lt;/p&gt;
&lt;p&gt;他们仗着雨声，吵得更大声了，反正噪音也穿不过这雨夜。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.leason.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="故事" scheme="http://www.leason.top/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>Fresco Tips</title>
    <link href="http://www.leason.top/2018/01/30/Fresco-Tips/"/>
    <id>http://www.leason.top/2018/01/30/Fresco-Tips/</id>
    <published>2018-01-29T16:47:56.000Z</published>
    <updated>2018-01-31T06:47:52.999Z</updated>
    
    <content type="html"><![CDATA[<p>从<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank" rel="noopener">Universal-Image-Loader</a>(目前作者已经停止维护) ,<a href="https://github.com/bumptech/glide" target="_blank" rel="noopener">Glide</a>到<a href="http://square.github.io/picasso/" target="_blank" rel="noopener">Picasso</a>,<a href="https://github.com/facebook/fresco" target="_blank" rel="noopener">Fresco</a>，在我使用过的这4款开源框架中，<strong>Fresco</strong> 算是当前最强大的。如果你还没接触或者了解过Fresco，那一定要去体验一下。推荐阅读<a href="http://frescolib.org/" target="_blank" rel="noopener">官方英文文档</a>，需要自备梯子，在使用过程中遇到问题可以去<a href="https://github.com/facebook/fresco/issues" target="_blank" rel="noopener">Fresco Github Issues</a>查找，能解决绝大部分问题。如果觉得英文实在费神，也有<a href="https://www.fresco-cn.org/" target="_blank" rel="noopener">中文文档</a>，但中文是国内开发者对比翻译的，可能会有滞后的情况。</p><a id="more"></a><p><strong>Fresco</strong>官方文档对于基本使用和配置已经介绍得非常详细，这就不细讲啦，主要介绍下面两点：</p><blockquote><p>1、如何用自己定义的ImageView去加载图片而不是SimpleDraweeView<br>2、如何加载https图片</p></blockquote><p>这就要用到<strong>Fresco</strong>中Image Pipeline这个类了，Image pipeline 负责完成加载图像，变成Android设备可呈现的形式所要做的每个事情，Image pipeline 可以从本地加载图片，也可以加载网络图片，下图包含了Image pipeline的逻辑流程，在子线程和主线程的任务罗列得很详细，借用一下中文文档的图：</p><p><img src="http://p1ns9jwhz.bkt.clouddn.com/imagepipeline.png" alt=""></p><p>那如何处理上面提到两个问题呢？我综合到了一个例子里进行说明。</p><p>首先切换到app目录下bulid.gradle文件，添加依赖</p><div class="note info"><p>compile ‘com.facebook.fresco:fresco:1.7.1’<br>compile “com.facebook.fresco:imagepipeline-okhttp3:0.12.0+”</p></div><p>然后在Application中进行Fresco初始化，如果加载的是https图片，那么这里就要添加HttpClient进行Image pipeline的配置（关于如何使用OkHttpClient的证书配置，网上有很多Demo和代码，为了方便，我这里就信任所有证书了，来自<a href="http://blog.csdn.net/u014800493/article/details/52956109" target="_blank" rel="noopener">CSDN</a>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.新建TrustAllcert类实现X509TrustManager接口：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrustAllCerts</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> </span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> </span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;<span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];&#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.方法createSSLSocketFactory()调用类TrustAllcert,获取SSLSocketFactory</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">createSSLSocketFactory</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        SSLSocketFactory ssfFactory = <span class="keyword">null</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            SSLContext sc = SSLContext.getInstance(<span class="string">"TLS"</span>);  </span><br><span class="line">            sc.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;<span class="keyword">new</span> TrustAllCerts()&#125;, <span class="keyword">new</span> SecureRandom());  </span><br><span class="line">  </span><br><span class="line">            ssfFactory = sc.getSocketFactory();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> ssfFactory;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着配置ImagePipelineConfig，初始化Fresco：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();  </span><br><span class="line">       builder.connectTimeout(DEFAULT_TIMEOUT, TimeUnit.SECONDS);  </span><br><span class="line">       builder.sslSocketFactory(createSSLSocketFactory());  </span><br><span class="line">       builder.hostnameVerifier(<span class="keyword">new</span> HostnameVerifier() &#123;  </span><br><span class="line">           <span class="meta">@Override</span>  </span><br><span class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;  </span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">           &#125;  </span><br><span class="line">       &#125;);  </span><br><span class="line">OkHttpClient okHttpClient = builder.build();</span><br><span class="line">ImagePipelineConfig config = OkHttpImagePipelineConfigFactory</span><br><span class="line">                .newBuilder(<span class="keyword">this</span>, okHttpClient)</span><br><span class="line">                .build();</span><br><span class="line">Fresco.initialize(<span class="keyword">this</span>,config);</span><br></pre></td></tr></table></figure></p><p>“万事俱备，只欠东风”，如果没有使用HTTPS的图片，可以跳过上面的大部分配置。使用步骤就很简单了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ImagePipeline imagePipeline = Fresco.getImagePipeline();</span><br><span class="line">DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; dataSource = imagePipeline.fetchDecodedImage(ImageRequest.fromUri(图片地址),<span class="keyword">null</span>);</span><br><span class="line">        dataSource.subscribe(<span class="keyword">new</span> BaseBitmapDataSubscriber() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewResultImpl</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">final</span> Drawable drawable = <span class="keyword">new</span> BitmapDrawable(App.getContext().getResources(), bitmap);</span><br><span class="line">                <span class="comment">//获取到drawable后，就可以使用自定义的ImageView加载图片了</span></span><br><span class="line">                ImageView.post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                      </span><br><span class="line">                        ImageView.setImageDrawable(drawable);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFailureImpl</span><span class="params">(DataSource&lt;CloseableReference&lt;CloseableImage&gt;&gt; dataSource)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, CallerThreadExecutor.getInstance());</span><br></pre></td></tr></table></figure></p><p>这里有个重点需要注意，一定要开线程加载图片，否则会报错抛如下异常</p><pre><code class="java">E/unknown:: unhandled exception android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从&lt;a href=&quot;https://github.com/nostra13/Android-Universal-Image-Loader&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Universal-Image-Loader&lt;/a&gt;(目前作者已经停止维护) ,&lt;a href=&quot;https://github.com/bumptech/glide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Glide&lt;/a&gt;到&lt;a href=&quot;http://square.github.io/picasso/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Picasso&lt;/a&gt;,&lt;a href=&quot;https://github.com/facebook/fresco&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fresco&lt;/a&gt;，在我使用过的这4款开源框架中，&lt;strong&gt;Fresco&lt;/strong&gt; 算是当前最强大的。如果你还没接触或者了解过Fresco，那一定要去体验一下。推荐阅读&lt;a href=&quot;http://frescolib.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方英文文档&lt;/a&gt;，需要自备梯子，在使用过程中遇到问题可以去&lt;a href=&quot;https://github.com/facebook/fresco/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fresco Github Issues&lt;/a&gt;查找，能解决绝大部分问题。如果觉得英文实在费神，也有&lt;a href=&quot;https://www.fresco-cn.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;中文文档&lt;/a&gt;，但中文是国内开发者对比翻译的，可能会有滞后的情况。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://www.leason.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://www.leason.top/tags/Android/"/>
    
      <category term="ImageView" scheme="http://www.leason.top/tags/ImageView/"/>
    
  </entry>
  
  <entry>
    <title>贰零壹捌</title>
    <link href="http://www.leason.top/2018/01/19/%E8%B4%B0%E9%9B%B6%E5%A3%B9%E6%8D%8C/"/>
    <id>http://www.leason.top/2018/01/19/贰零壹捌/</id>
    <published>2018-01-19T10:02:46.000Z</published>
    <updated>2018-02-22T06:40:42.424Z</updated>
    
    <content type="html"><![CDATA[<p>今天请假把落下的一些事办完，可以闲下来好好回顾这段时间的琐事了。</p><p>精神萎靡不振，心情郁闷至极。</p><p>现在所有节日气氛感受最浓烈的地方，都来自朋友圈，2018也是触不及防的就从朋友圈串到了跟前。可能是由于我并没有准备足够的礼仪来迎接它，比如发个心情，接下来这新官上任的三把火可真让人猝不及防。</p><a id="more"></a><hr><p>年初公司做了信息安全规划，Android移动端进行接口调整需要发布新版本。但是我在调整接口的时候出现了纰漏，忽略了在线更新，导致一部分用户更新到了bug版本，民怨沸腾。领导紧急开会，采取了一系列补救措施，总算是暂时平息了下来。好在影响范围不大啊，不然就只有一首《凉凉》送给我。</p><p>奢望着能借一月中旬公司的年会去去晦气，还真赢得了彩头，我们小组在活动中以绝对的优势获得了一等奖。</p><p>老子曾说“祸兮福之所倚，福兮祸之所伏”，福祸相依的生活辩证法是真的牛逼，不得不承认古人智慧是无穷的。</p><p>接下来的事实证明我还是太年轻。</p><p>周六起床就感冒，但为了人生在世的三大事之一，死撑着出去办资料。</p><p>天公也不作美，头两天可爱的暖阳也害羞躲了起来，只有冬日凌冽的寒风呼呼的刮着。回到楼下连楼梯都爬不动，整个人都是飘的，终于是熬不住了。</p><p>忘了怎么去的药店然后又到家的。只记得38度多的体温，把医生都给惊一跳，“小伙子发着高烧玩呢？还敢在外面浪一天，现在才来拿药”。</p><p>四肢健全的国防身体，居然连体温都驾驭不住。</p><p>在医生的嘱托下，回家洗了个滚烫的热水澡，吃完药躺到被窝里。第二天在床上整整睡了一天。</p><p>直到现在，冬日的流感都还剩下着尾巴，希望它不要太眷恋我的身体，早日离开吧。</p><hr><p>记得以前看过一本书《天才在左，疯子在右》，发高烧时的精神状态就无限接近于疯，脑袋里像把一团蜘蛛丝搅在一起一样，乱作麻。</p><p>当时这本书看到三分之二，便没继续了。我觉得一本书能看完只有两种情况：</p><p> 1、这本书对胃口，能找到共鸣。<br>2、很多人看这本书都有共鸣，你不甘寂寞，认为自己也一定有。</p><p>一千个人眼中有一千个哈姆雷特，但前提是你要能读到哈姆雷特。</p><p>书中作者用一种偏执的做法，把自己放置于精神病的层面，通过与各类病人的对话，键入自己的思想。就算读者发现了逻辑上的不合理，也没办法深究或者反驳，难不成还要去跟一个精神病讲道理？所以后面我就不看了，但书里面有一段话让我印象深刻：</p><blockquote class="blockquote-center">如果你想知道这个世界的本质，那你就要用天的眼睛去看天，云的眼睛去看云，大海的眼睛去看大海，大地的眼睛去看大地。花草树木的眼睛去看花草树木，石头的眼睛去看石头，用人的眼睛去看人。</blockquote> <p>那我用高烧的温度欢迎2018到来，能赐予我狗年的旺旺旺吗？</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天请假把落下的一些事办完，可以闲下来好好回顾这段时间的琐事了。&lt;/p&gt;
&lt;p&gt;精神萎靡不振，心情郁闷至极。&lt;/p&gt;
&lt;p&gt;现在所有节日气氛感受最浓烈的地方，都来自朋友圈，2018也是触不及防的就从朋友圈串到了跟前。可能是由于我并没有准备足够的礼仪来迎接它，比如发个心情，接下来这新官上任的三把火可真让人猝不及防。&lt;/p&gt;
    
    </summary>
    
      <category term="心情" scheme="http://www.leason.top/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="心情" scheme="http://www.leason.top/tags/%E5%BF%83%E6%83%85/"/>
    
      <category term="生活" scheme="http://www.leason.top/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>如何优雅的使用WebView</title>
    <link href="http://www.leason.top/2018/01/09/%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E4%BD%BF%E7%94%A8WebView/"/>
    <id>http://www.leason.top/2018/01/09/如何优雅的使用WebView/</id>
    <published>2018-01-09T01:55:20.000Z</published>
    <updated>2018-02-28T01:56:24.120Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://developer.android.google.cn/reference/android/webkit/WebView.html" target="_blank" rel="noopener"><strong>WebView</strong></a> 是Android开发中经常会用到的功能，是一个基于webkit引擎，用于显示来自本地、服务器web页面的控件，可以很好的提升应用扩展性。有以下优点：</p><blockquote><ul><li>可以直接显示和渲染web页面</li><li>webview可以直接用html文件（网络上或本地assets中）作布局</li><li>和JavaScript交互调用</li></ul></blockquote><p>基本使用方法在 <a href="https://developer.android.google.cn/reference/android/webkit/WebView.html" target="_blank" rel="noopener"><strong>安卓开发文档</strong></a> 中已经做了相关的详细介绍，这里主要根据日常开发中需求，整理了以下3个方面。</p><a id="more"></a><h3 id="一、处理web页面中的图片点击事件"><a href="#一、处理web页面中的图片点击事件" class="headerlink" title="一、处理web页面中的图片点击事件"></a>一、处理web页面中的图片点击事件</h3><p>在应用中使用 <strong>WebView</strong> 加载网页进行显示的时候，多数情况下都要进行内容适配，这会导致图片进行一定比例的缩小，在手机上看起来模糊，影响用户体验。我们可以提取出网页中的关键图片添加点击事件，然后对图片进行自定义处理，比如：放大、旋转等。</p><h4 id="1-定义JavaScript接口类"><a href="#1-定义JavaScript接口类" class="headerlink" title="1.定义JavaScript接口类"></a>1.定义JavaScript接口类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaScriptInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    </span><br><span class="line">    JavaScriptInterface(Context context) &#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击图片的回调方法</span></span><br><span class="line">    <span class="comment">//必须添加JavascriptInterface注解,否则无法响应</span></span><br><span class="line">    <span class="meta">@JavascriptInterface</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">openImage</span><span class="params">(String img)</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">        <span class="comment">//这里获取到的是图片地址</span></span><br><span class="line">        intent.putExtra(<span class="string">"image"</span>, img);</span><br><span class="line">        <span class="comment">//跳转到图片处理页面</span></span><br><span class="line">        intent.setClass(context, ImageActivity.class);</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-在WebView中添加JavascriptInterface"><a href="#2-在WebView中添加JavascriptInterface" class="headerlink" title="2.在WebView中添加JavascriptInterface"></a>2.在WebView中添加JavascriptInterface</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaScriptInterface javascriptInterface = <span class="keyword">new</span> JavaScriptInterface(context);</span><br><span class="line">webview.addJavascriptInterface(javascriptInterface, <span class="string">"imagelistener"</span>);</span><br></pre></td></tr></table></figure><h4 id="3-新建图片遍历和处理的方法"><a href="#3-新建图片遍历和处理的方法" class="headerlink" title="3.新建图片遍历和处理的方法"></a>3.新建图片遍历和处理的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addImageClickListener</span><span class="params">(WebView view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 遍历所有的img节点,添加onclick函数，函数的功能是在图片点击的时候调用本地java接口并传递url过去</span></span><br><span class="line">        view.loadUrl(<span class="string">"javascript:(function()&#123;"</span> +</span><br><span class="line">                <span class="string">"var objs = document.getElementsByTagName(\"img\"); "</span> +</span><br><span class="line">                <span class="string">"for(var i=0;i&lt;objs.length;i++)  "</span> +</span><br><span class="line">                <span class="string">"&#123;"</span></span><br><span class="line">                + <span class="string">"    objs[i].onclick=function()  "</span> +</span><br><span class="line">                <span class="string">"    &#123;  "</span></span><br><span class="line">                + <span class="string">"        window.imagelistner.openImage(this.src);  "</span> +</span><br><span class="line">                <span class="string">"    &#125;  "</span> +</span><br><span class="line">                <span class="string">"&#125;"</span> +</span><br><span class="line">                <span class="string">"&#125;)()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//循环遍历接收到的数据,提取出带有”img”标签的内容,设置它的宽度占屏幕的100%，图片自适应</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">imgReset</span><span class="params">(WebView view)</span> </span>&#123;</span><br><span class="line">        view.loadUrl(<span class="string">"javascript:(function()&#123;"</span> +</span><br><span class="line">                <span class="string">"var objs = document.getElementsByTagName('img'); "</span> +</span><br><span class="line">                <span class="string">"for(var i=0;i&lt;objs.length;i++)  "</span> +</span><br><span class="line">                <span class="string">"&#123;"</span></span><br><span class="line">                + <span class="string">"var img = objs[i];   "</span></span><br><span class="line">                + <span class="string">"    img.style.maxWidth = '100%';   "</span></span><br><span class="line">                + <span class="string">"    img.style.height = 'auto';   "</span></span><br><span class="line">                + <span class="string">"&#125;"</span> +</span><br><span class="line">                <span class="string">"&#125;)()"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-设置WebViewClient"><a href="#4-设置WebViewClient" class="headerlink" title="4.设置WebViewClient"></a>4.设置WebViewClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">webview.setWebViewClient(<span class="keyword">new</span> WebViewClient() &#123;</span><br><span class="line">            <span class="comment">//复写shouldOverrideUrlLoading()方法，设置打开网页时不调用系统浏览器， 直接在WebView中显示</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">                view.loadUrl(url);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onPageFinished(view, url);</span><br><span class="line">                <span class="comment">// html加载完成之后，添加监听图片的点击js函数</span></span><br><span class="line">                addImageClickListner(view);</span><br><span class="line">                imgReset(view);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        webView.loadData(<span class="string">"&lt;!DOCTYPE html&gt;&lt;title&gt;&lt;/title&gt;"</span>, <span class="string">"text/html"</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>至此， <strong>WebView</strong>  加载的网页中，图片点击事件处理已经完成。需要注意的是，使用此方法来允许JavaScript控制主机应用程序。这是一个强大的功能，但也为面向JELLY_BEAN或更早版本的应用程序提供安全风险。如果应用程序在运行Android 4.2的设备上运行，那么定位比<a href="https://developer.android.google.cn/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN" target="_blank" rel="noopener">JELLY_BEAN</a>更晚的版本的应用程序仍然存在漏洞。使用此方法的最安全的方法是将<a href="https://developer.android.google.cn/reference/android/os/Build.VERSION_CODES.html#JELLY_BEAN_MR1" target="_blank" rel="noopener">JELLY_BEAN_MR1</a>作为目标，并确保只有在Android 4.2或更高版本上运行时才会调用该方法。</p><p>使用这些较旧的版本，JavaScript可以使用反射来访问注入对象的公共字段。在包含非信任内容的  <strong>WebView</strong>  中使用此方法可能允许攻击者以非预期的方式操纵主机应用程序，并使用主机应用程序的权限执行Java代码。在可能包含不可信内容的  <strong>WebView</strong>  中使用此方法时要格外小心。</p><h3 id="二、实现web文件下载功能"><a href="#二、实现web文件下载功能" class="headerlink" title="二、实现web文件下载功能"></a>二、实现web文件下载功能</h3><p> <strong>WebView</strong>  控制网页在应用中进行显示的时候，如果碰到下载链接，点击将不会有任何效果，这是因为默认状态下 <strong>WebView</strong> 没有开启文件下载的功能，如果要实现文件下载的功能，需要设置WebView的DownloadListener，自己实现DownloadListener的接口来达到文件的下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DownloadListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadStart</span><span class="params">(String url, String userAgent,</span></span></span><br><span class="line"><span class="function"><span class="params">            String contentDisposition, String mimetype, <span class="keyword">long</span> contentLength)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:right">类型</th><th style="text-align:center">释义</th></tr></thead><tbody><tr><td style="text-align:left">url</td><td style="text-align:right">String</td><td style="text-align:center">要下载的内容的完整网址</td></tr><tr><td style="text-align:left">userAgent</td><td style="text-align:right">String</td><td style="text-align:center">用于下载的用户代理</td></tr><tr><td style="text-align:left">contentDisposition</td><td style="text-align:right">String</td><td style="text-align:center">配置http头部信息（如果有的话）</td></tr><tr><td style="text-align:left">mimetype</td><td style="text-align:right">String</td><td style="text-align:center">从服务器获知的内容的MIME类型</td></tr><tr><td style="text-align:left">contentLength</td><td style="text-align:right">long</td><td style="text-align:center">从服务器获知的文件大小</td></tr></tbody></table><h4 id="1-实现DownloadListener接口"><a href="#1-实现DownloadListener接口" class="headerlink" title="1.实现DownloadListener接口"></a>1.实现DownloadListener接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDownLoadListener</span> <span class="keyword">implements</span> <span class="title">DownloadListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    WebViewDownLoadListener(Context mContext) &#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = mContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDownloadStart</span><span class="params">(String url, String userAgent, String contentDisposition, String mimetype, <span class="keyword">long</span> contentLength)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里进行文件下载的处理</span></span><br><span class="line">        <span class="comment">//1、先判断手机是否有SD卡用于存储文件</span></span><br><span class="line">         <span class="keyword">if</span> (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">          <span class="comment">//如果没有则提醒用户</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2、通过url进行文件下载，这里使用的是AsyncTask</span></span><br><span class="line">        DownloaderTask task = <span class="keyword">new</span> DownloaderTask();</span><br><span class="line">        task.execute(url);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-新建DownloaderTask-继承AsyncTask并重写其方法"><a href="#2-新建DownloaderTask-继承AsyncTask并重写其方法" class="headerlink" title="2.新建DownloaderTask 继承AsyncTask并重写其方法"></a>2.新建DownloaderTask 继承AsyncTask并重写其方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloaderTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Void</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">       <span class="comment">//文件存储路径（自定义）</span></span><br><span class="line">       String dpath = AppConfig.attach_path;</span><br><span class="line"></span><br><span class="line">       DownloaderTask() &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> String <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">           String url = params[<span class="number">0</span>];</span><br><span class="line">           String[] tmpname = url.split(<span class="string">"/"</span>);</span><br><span class="line">           String fileName = tmpname[<span class="number">4</span>] + <span class="string">"_"</span> + url.substring(url.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               fileName = URLDecoder.decode(fileName, <span class="string">"UTF-8"</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           File file = <span class="keyword">new</span> File(dpath, fileName);</span><br><span class="line">           <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">               Log.i(<span class="string">"tag"</span>, <span class="string">"The file has already exists."</span>);</span><br><span class="line">               <span class="keyword">return</span> fileName;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               URL realUrl = <span class="keyword">new</span> URL(url);</span><br><span class="line">               HttpURLConnection conn = (HttpURLConnection)realUrl.openConnection();</span><br><span class="line">               <span class="keyword">if</span> (conn.getResponseCode() == <span class="number">200</span>) &#123;</span><br><span class="line">                   <span class="comment">//获取文件流，并写入SD卡</span></span><br><span class="line">                   InputStream input = conn.getInputStream();</span><br><span class="line">                   writeToSDCard(fileName, input);</span><br><span class="line">                   input.close();</span><br><span class="line">                   <span class="keyword">return</span> fileName;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.onCancelled();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">           <span class="keyword">super</span>.onPostExecute(result);</span><br><span class="line">           <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">               Toast t = Toast.makeText(mContext, <span class="string">"连接错误！请稍后再试！"</span>, Toast.LENGTH_LONG);</span><br><span class="line">               t.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">               t.show();</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           Toast t = Toast.makeText(mContext, <span class="string">"已保存到SD卡。"</span>, Toast.LENGTH_LONG);</span><br><span class="line">           t.setGravity(Gravity.CENTER, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">           t.show();</span><br><span class="line"></span><br><span class="line">           File file = <span class="keyword">new</span> File(dpath, result);</span><br><span class="line">           Log.i(<span class="string">"tag"</span>, <span class="string">"Path="</span> + file.getAbsolutePath());</span><br><span class="line">           <span class="comment">//获取intent跳转，打开本地文件</span></span><br><span class="line">           Intent intent = getFileIntent(file);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//捕获异常并处理掉，防止APP崩溃</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               mContext.startActivity(intent);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">               Toast.makeText(mContext, <span class="string">"没有找到可匹配的程序"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">           <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Void... values)</span> </span>&#123;</span><br><span class="line">           <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">           <span class="keyword">super</span>.onProgressUpdate(values);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="3-写入文件到本地和打开文件的方法"><a href="#3-写入文件到本地和打开文件的方法" class="headerlink" title="3.写入文件到本地和打开文件的方法"></a>3.写入文件到本地和打开文件的方法</h4><h5 id="3-1-写入文件到本地"><a href="#3-1-写入文件到本地" class="headerlink" title="3.1 写入文件到本地"></a>3.1 写入文件到本地</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeToSDCard</span><span class="params">(String fileName, InputStream input)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</span><br><span class="line">            File file = <span class="keyword">new</span> File(AppConfig.attach_path, fileName);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line">                <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((j = input.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    fos.write(b, <span class="number">0</span>, j);</span><br><span class="line">                &#125;</span><br><span class="line">                fos.flush();</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Log.i(<span class="string">"tag"</span>, <span class="string">"NO SDCard."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="3-2-打开文件"><a href="#3-2-打开文件" class="headerlink" title="3.2 打开文件"></a>3.2 打开文件</h5><blockquote><p>请注意Android7.0以后权限机制进行了调整，为了提高文件访问的安全性，限制了应用通过file://方式直接对外提供文件路径的功能，向应用外部提供这种uri会直接导致应用崩溃。替代方案是使用FileProvider通过content://方式提供这些uri，并进行临时访问授权，对应的目录要在xml中注册才行。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> Intent <span class="title">getFileIntent</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        Uri uri = Uri.fromFile(file);</span><br><span class="line">        String type = getMIMEType(file);</span><br><span class="line">        Log.i(<span class="string">"tag"</span>, <span class="string">"type="</span> + type);</span><br><span class="line">        <span class="comment">//判断是否是Android N(7.0)以及更高版本</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.addCategory(<span class="string">"android.intent.category.DEFAULT"</span>);</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">24</span>) &#123;</span><br><span class="line">            <span class="comment">//关于FileProvider的相关配置，这里就不做介绍</span></span><br><span class="line">            intent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            Uri contentUri = FileProvider.getUriForFile(mContext, <span class="string">"XXX.YYYY.ZZ.fileProvider"</span>, file);</span><br><span class="line">            intent.setDataAndType(contentUri, type);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">            intent.setDataAndType(uri, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> intent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件类型</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getMIMEType</span><span class="params">(File f)</span> </span>&#123;</span><br><span class="line">        String type = <span class="string">""</span>;</span><br><span class="line">        String fName = f.getName();</span><br><span class="line">      <span class="comment">/* 取得扩展名 */</span></span><br><span class="line">        String end = fName.substring(fName.lastIndexOf(<span class="string">"."</span>) + <span class="number">1</span>, fName.length()).toLowerCase();</span><br><span class="line">      <span class="comment">/* 依扩展名的类型决定MimeType */</span></span><br><span class="line">        <span class="keyword">switch</span> (end) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"pdf"</span>:</span><br><span class="line">                type = <span class="string">"application/pdf"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"m4a"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"mp3"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"mid"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"xmf"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"ogg"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"wav"</span>:</span><br><span class="line">                type = <span class="string">"audio/*"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"3gp"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"mp4"</span>:</span><br><span class="line">                type = <span class="string">"video/*"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"jpg"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"gif"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"png"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"jpeg"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"bmp"</span>:</span><br><span class="line">                type = <span class="string">"image/*"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"apk"</span>:</span><br><span class="line">        <span class="comment">/* android.permission.INSTALL_PACKAGES */</span></span><br><span class="line">                type = <span class="string">"application/vnd.android.package-archive"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"pptx"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"ppt"</span>:</span><br><span class="line">                type = <span class="string">"application/vnd.ms-powerpoint"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"docx"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"doc"</span>:</span><br><span class="line">                type = <span class="string">"application/msword"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"xlsx"</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"xls"</span>:</span><br><span class="line">                type = <span class="string">"application/vnd.ms-excel"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">         <span class="comment">/*如果无法直接打开，就跳出软件列表给用户选择 */</span></span><br><span class="line">                type = <span class="string">"*/*"</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="三、处理web页面的弹框"><a href="#三、处理web页面的弹框" class="headerlink" title="三、处理web页面的弹框"></a>三、处理web页面的弹框</h3><p>每个web页面都会有自己的逻辑，其中涉及到弹框的处理，默认情况下，<strong>Android WebView</strong>是不支持 <strong>js</strong> 的Alert(),Confirm(),Prompt()函数的弹出提示框，需要我们设置<a href="https://developer.android.google.cn/reference/android/webkit/WebChromeClient.html" target="_blank" rel="noopener">WebChromeClient</a> 对象来完成。这里我们可以分为以下两种情况来讨论。</p><h4 id="1-不对弹框进行任何处理"><a href="#1-不对弹框进行任何处理" class="headerlink" title="1.不对弹框进行任何处理"></a>1.不对弹框进行任何处理</h4><p>这种很简单，直接设置就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient());</span><br></pre></td></tr></table></figure><h4 id="2-处理弹框样式"><a href="#2-处理弹框样式" class="headerlink" title="2.处理弹框样式"></a>2.处理弹框样式</h4><p>重写WebChromeClient的下列方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//警告框</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里处理交互逻辑</span></span><br><span class="line">    <span class="comment">// 如果客户端返回true，WebView将假定客户端将处理对话框。如果客户端返回false，它将继续执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//确认对话框</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsConfirm</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//提示对话框</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsPrompt</span><span class="params">(WebView view, String url, String message, String defaultValue, JsPromptResult result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//告诉客户端显示一个对话框来确认离开当前页面的导航。这是onbeforeunload javascript事件的结果。</span></span><br><span class="line"><span class="comment">//如果客户端返回true，WebView将假定客户端将处理确认对话框并调用相应的JsResult方法。</span></span><br><span class="line"><span class="comment">//如果客户端返回false，则默认值true将返回到javascript以接受离开当前页面的导航。</span></span><br><span class="line"><span class="comment">//默认行为是返回false。将JsResult设置为true将离开当前页面，false将取消导航。</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsBeforeUnload</span><span class="params">(WebView view, String url, String message, JsResult result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developer.android.google.cn/reference/android/webkit/WebView.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;WebView&lt;/strong&gt;&lt;/a&gt; 是Android开发中经常会用到的功能，是一个基于webkit引擎，用于显示来自本地、服务器web页面的控件，可以很好的提升应用扩展性。有以下优点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;可以直接显示和渲染web页面&lt;/li&gt;
&lt;li&gt;webview可以直接用html文件（网络上或本地assets中）作布局&lt;/li&gt;
&lt;li&gt;和JavaScript交互调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本使用方法在 &lt;a href=&quot;https://developer.android.google.cn/reference/android/webkit/WebView.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;安卓开发文档&lt;/strong&gt;&lt;/a&gt; 中已经做了相关的详细介绍，这里主要根据日常开发中需求，整理了以下3个方面。&lt;/p&gt;
    
    </summary>
    
      <category term="开发" scheme="http://www.leason.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Android" scheme="http://www.leason.top/tags/Android/"/>
    
      <category term="WebView" scheme="http://www.leason.top/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>候鸟和鱼</title>
    <link href="http://www.leason.top/2017/12/05/%E5%80%99%E9%B8%9F%E5%92%8C%E9%B1%BC/"/>
    <id>http://www.leason.top/2017/12/05/候鸟和鱼/</id>
    <published>2017-12-05T06:56:03.248Z</published>
    <updated>2018-03-09T09:13:29.224Z</updated>
    
    <content type="html"><![CDATA[<p>从一个季节逃到另一个季节需要毅力，需要勇气，甚至是生命。每年这个时候，鱼都会洄游到天的另一端，候鸟也会迁徙到那里，他们起点不同，但终点一样。</p><p>候鸟最喜欢的就是春天了，春天可以见到鱼。他总是会早到，然后在那片水域上空不停振翅，他知道鱼喜欢天空，他便把这里擦亮，让鱼看见最美的天。</p><p>他们每年都会在一起交换各自的故事。<br><a id="more"></a><br>“我给你讲啊，今年可有趣了”<br>“去年的那只螃蟹你还记得吧？今年产了好多小螃蟹，她的海螺家根本住不下”<br>“大峡谷那边又涨潮了”<br>“小黄鱼去了大海深处寻找自由，一直没回来，听说那里暗流湍急，还有水怪”<br>“今年海浪汹涌，没有看见打鱼人出海”</p><p>“我新换了一副羽毛，可以飞得更快更高”<br>“我穿越过暴风雨”<br>“我去过极北的森林，那里花很香，树林茂密，没有猎人”<br>“来的路上我飞上了最高的山峰，很冷，但风景很好。云成海，可以在里面自由穿梭，像软绵绵的棉花糖”</p><p>鱼儿已经沉迷，痴痴的望着蓝天。</p><p>“鱼儿，你为什么向往天空啊？”<br>“我想跟你一起飞，我厌倦了水的束缚，我不想摆动身躯，总觉得这是一种病，拼了命的摇尾乞怜活下去的病。”<br>“带我一起飞，好吗？”</p><p>候鸟没有接话，他知道鱼是属于大海的，就像他属于天空。</p><p>“鱼儿，明年我们各自送对方一件礼物吧”<br>“好啊”</p><p>恰如其分的承诺是打破沉默最好的工具。</p><hr><p>鱼在父亲的鳞片上看过了很多故事，其中描述最多的是深海的珍珠，纯净如白昼。她决定要找到这颗珍珠送给候鸟。</p><p>这次是她从小到大最陌生的一次出行，她要独自在海底穿过大峡谷，游过深沟，但想到可以和候鸟在春天相遇就不觉得害怕。</p><p>当她快要筋疲力竭的时候，终于在如浓墨般深黑的海中，见到了一抹光亮划破黑夜来到她的眼前，好暖的光啊，像太阳一样。故事是真的，深海的珍珠果然很漂亮。</p><p>候鸟觉得今年时间过得格外的慢，他只想早点飞到那片海域，他后悔了不想让鱼去寻找礼物，因为他这段时间总是做梦。</p><p>他梦见鱼儿游得太远，忘记了回家的路，<br>他梦见鱼儿游得太浅，闯进了坚固的渔网，<br>他梦见鱼儿游得太深，遇到了凶猛的水怪。</p><hr><p>春天终于到来，候鸟在之前精心挑选了刚入冬的链草织成篮子，这个篮子比他的身体大整整两倍。他比往年更早来了一周，把海域上所有的云朵都赶进了篮子里，因为鱼向往天空的自由，便觉云朵是最合适的礼物，虽然日月星辰更好，但他摘不到。</p><p>候鸟看到了最灿烂的珍珠，鱼看到篮子里雪白的云朵。</p><p>满心欢喜。</p><p>这是鱼儿第一次触到云，激动得说不出话来。她觉得这是最好的礼物，最美的云，至少比这片海域上的云要美。她急忙抬头想要对比一下，然而，万里无云。</p><p>“我把你头上这片天空的云朵都装在了这里呀”</p><p>突然间，鱼儿觉得云朵不那么舒服了，至少没有她千辛万苦得到的珍珠白，就像一团乱糟糟的棉絮，陷进去只会让她窒息。</p><p>候鸟不懂，这不是刚刚她喜欢的东西吗？为什么转眼之间，眼里就充满了厌恶。</p><p>“你不喜欢这个礼物？”<br>“喜欢”<br>“最美的云就在你头顶，我把它取来给你，你不开心吗？”<br>“开心”<br>“我每年都迁徙，只有这里云最美，我只想把最美的东西给你”<br>“谢谢你”</p><p>除了谢谢，鱼儿不想再多说一句话。</p><p>候鸟不懂，有时候过程比结果重要得多。</p><p>候鸟不想看到鱼儿不开心，他心想，云朵不好，就只有带她高飞。</p><p>“我带你飞吧”<br>“好啊！”</p><p>终于等来了这一天，候鸟用他有力的双爪带起鱼，他怕锋利的爪伤着鱼儿，但更怕她掉下去，所以他握得很紧。</p><p>离开水面的一瞬间，耀眼的阳光让鱼眯起了眼睛，周围一片雪白，柔软的光线如蚕丝慢慢拨开她的双眼，她听到了风的呼唤，穿过了云的身体。她不愿错过这样的风景哪怕一秒，双眼努力的睁大，嘴也努力的张大，直至忘记了如何去呼吸。</p><hr><p>候鸟认为一定是他的爪子太锋利杀死了鱼，他折断了双脚，他相信一定会有海天相连的地方，那里鸟和鱼可以永远生活在一起，他要一直飞，直到找到那个地方。</p><p>鱼的记忆很短，短到她有时候刚出门就会忘了回家的路，所以每年和候鸟的相遇，她都会像父亲一样，把经历写成故事，刻在自己的鳞片上。这次的故事，该由他来写了。候鸟摘下身上最美的一片羽毛，写上最后的故事，用嘴啄下鱼鳞串成项链戴在脖子上，珍珠被他放在嘴里。</p><p>天空多了一只没有脚，不会叫，也不愿抬头看天的候鸟，在他眼里只有胸前鱼鳞的项链，身下蔚蓝的深海，嘴里纯白的珍珠，远方海天一线的目的地。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从一个季节逃到另一个季节需要毅力，需要勇气，甚至是生命。每年这个时候，鱼都会洄游到天的另一端，候鸟也会迁徙到那里，他们起点不同，但终点一样。&lt;/p&gt;
&lt;p&gt;候鸟最喜欢的就是春天了，春天可以见到鱼。他总是会早到，然后在那片水域上空不停振翅，他知道鱼喜欢天空，他便把这里擦亮，让鱼看见最美的天。&lt;/p&gt;
&lt;p&gt;他们每年都会在一起交换各自的故事。&lt;br&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://www.leason.top/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="故事" scheme="http://www.leason.top/tags/%E6%95%85%E4%BA%8B/"/>
    
  </entry>
  
</feed>
